name: Deploy mdBook with Pages Artifact

on:
  # 在推送到 main 分支时触发部署
  push:
    branches: [ "main" ]
    paths:
      - "src/**"                        # 匹配src目录下的所有目录和子目录
      - "book.toml"                     # 配置文件变更也触发构建（可选）
      - ".github/workflows/deploy.yml"  # 工作流文件本身变更时触发
  # 允许在 GitHub 界面手动触发工作流
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限，允许写入 Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 防止多个并发部署相互覆盖
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      MDBOOK_VERSION: 0.4.52
      MDBOOK_TOC_VERSION: 0.14.2
      MDBOOK_PAGETOC_VERSION: 0.2.0
      MDBOOK_MERMAID_VERSION: 0.16.0
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 获取完整提交历史，确保hashFiles能正确计算哈希
          fetch-depth: '0'

      - name: Install Rust & Cargo
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Cargo Dependencies
        uses: actions/cache@v4
        id: cargo-cache
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-v3
          restore-keys: |
            ${{ runner.os }}-cargo-deps-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-deps-

      - name: Cache Target Directory
        uses: actions/cache@v4
        id: target-cache
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/src/**', 'book.toml') }}-v2
          restore-keys: |
            ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-target

      - name: Install mdBook & Plugins
        # 只有当缓存未命中时才执行安装
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        run: |
          cargo install mdbook@${MDBOOK_VERSION}
          cargo install mdbook-toc@${MDBOOK_TOC_VERSION}
          cargo install mdbook-pagetoc@${MDBOOK_PAGETOC_VERSION}
          cargo install mdbook-mermaid@${MDBOOK_MERMAID_VERSION}

      - name: Build the book
        run: mdbook build

      - name: Upload artifact
        # 将构建好的 book 目录上传为 Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./book

  deploy:
    # 此任务依赖构建任务完成
    needs: build
    runs-on: ubuntu-latest

    # 定义一个部署环境，便于在仓库设置中查看部署历史
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        # 将已上传的 Artifact 部署到 Pages
        uses: actions/deploy-pages@v4